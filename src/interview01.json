01
The Vue instance lifecycle refers to the different stages a Vue component goes through from its creation to its destruction. 
At each stage, Vue automatically calls specific lifecycle hooks, which allow developers to run code at key moments during the component’s life.

These hooks are particularly useful for initializing data, making API requests, manipulating DOM elements, or cleaning up resources like timers or event listeners.

Vue’s lifecycle can be divided into four main phases:

1. Creation Phase
These hooks are called when the Vue instance is being created.
beforeCreate
Called right after the instance is initialized.
At this stage, data observation, computed properties, methods, and events have not been set up yet.
created
Called after the instance has been created.
Data, methods, and events are now available. This is a good place to make API calls or initialize data.

2. Mounting Phase
The process in which a Vue instance first mounts a component and its template onto the DOM. 
At this stage, the component's template is rendered into HTML and inserted into the page, and the component also executes the corresponding lifecycle hooks.

beforeMount
Called right before the initial render happens and the template is compiled. ==> Called right before (A and B)
The $el property exists but hasn’t been mounted to the page yet.
mounted
Called after the component has been rendered and inserted into the DOM.
Ideal for DOM manipulation or initializing third-party libraries.

3. Updating Phase
These hooks are triggered when reactive data changes and the component re-renders.
It is a more clear, efficient and maintainable approach to prefer using computed properties and watchers instead of handling data changes directly in lifecycle hooks.
However, in certain specific scenarios, lifecycle hooks are necessary.

beforeUpdate -- Recommended usage scenarios
some preparation before the DOM is updated.
This is a good place to access the current DOM state before it changes.

updated -- Recommended usage scenarios
Called after the DOM has been updated with the new data.
This is a good place to perform operations that depend on the updated DOM


4. Unmounting Phase
These hooks are called when the component is being removed from the DOM.

beforeUnmount(Vue 3) / beforeDestroy(Vue 2)
Called just before the component is destroyed.
This is a good place to clean up non-Vue resources such as timers, event listeners, or subscriptions.

unmounted(Vue 3) / destroyed(Vue 2)
Called after the component has been fully destroyed.
All directives have been unbound, and all event listeners removed.


02

Data observation is one of the core mechanisms of Vue. It enables Vue to track changes in data and automatically update the view. Vue uses Object.defineProperty (in Vue 2.x) or Proxy (in Vue 3.x) to implement data monitoring. （实施数据监控）

Function:
When you declare the data function of a component and return an object, Vue will recursively convert all the properties of that object into getter/setter forms.
These getters and setters enable Vue to perform dependency tracking and update operations（依赖追踪并执行更新操作） when the data changes, thereby ensuring that the view can automatically reflect the latest state.
------This passage describes the core feature of Vue: the Reactivity System.

const variable = ref()    proxy   I'll study it later when I have more time.


03

Component-based programming is a programming concept that divides a large software system into multiple small, independent components, each of which has specific functions and roles. 
These components can be independently developed, tested, and maintained, 
and can be flexibly combined and reused, thereby improving the development efficiency and quality of the software system.

04

Computed is a computed property based on the Vue reactive system. 
Its value is derived from one or more reactive data. 
The characteristic of a computed property is that it is cached. 
It will only recalculate the computed property when the dependent data changes; 
otherwise, it will use the cached result.
【Cache, recalculating only when there is a change.】


methods 是在 Vue 中定义的普通方法，通常用于响应用户的操作或处理事件。每次调用 methods 中的方法时，都会重新执行函数体，不会缓存结果。
"methods" is a common method defined in Vue, which is usually used to respond to user operations or handle events. 
Every time a method in "methods" is called, the function body will be executed anew and the result will not be cached.
// with && within
// with ====
// within Emphasize boundaries, limits and borders 
// eg: The mistake was within acceptable limits.  这个错误在可接受的范围内。
// eg: Please submit your report within 24 hours.


// in ====
// Used to describe something/someone being inside a certain space, range, environment, etc. 
// Usually does not emphasize "boundaries" or "limitations"

The "watch" function is used to observe the data changes within a Vue instance (including data, computed properties, props, etc.). 
Whenever a data value changes, the watch function will automatically execute the specified callback function.


05







